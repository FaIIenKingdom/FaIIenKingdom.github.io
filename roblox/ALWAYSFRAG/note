local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = workspace.CurrentCamera

RunService.RenderStepped:Connect(function()
    Camera = workspace.CurrentCamera
end)

local function Create(Object, Properties, Parent)
    local Obj = Instance.new(Object)
    for i,v in pairs (Properties) do
        Obj[i] = v
    end
    if Parent ~= nil then
        Obj.Parent = Parent
    end
    return Obj
end



local menu

do
    local library = loadstring(game:HttpGet("https://xyzzr.github.io/roblox/ALWAYSFRAG/tlibrary.lua"))()
    menu = library.new([[ALWAYSFRAG <font color="rgb(78, 93, 234)">v1.14 beta build</font>]], "ALWAYSFRAG\\")
    local tabs = {
        menu.new_tab("http://www.roblox.com/asset/?id=7300480952"),
        menu.new_tab("http://www.roblox.com/asset/?id=7300489566"),
    }

    do
        local _menu = tabs[2].new_section("menu")
        local all_cfgs

        local configs = _menu.new_sector("configs")
        local text
        local list = configs.element("Scroll", "config list", {options = {"none"}}, function(State)
            text:set_value({Text = State.Scroll})
        end)
        
        text = configs.element("TextBox", "config name")
        configs.element("Button", "save", nil, function()
            if menu.values[5].menu.configs["config name"].Text ~= "none" then
                menu.save_cfg(menu.values[5].menu.configs["config name"].Text)
            end
        end)
        configs.element("Button", "load", nil, function()
            if menu.values[5].menu.configs["config name"].Text ~= "none" then
                menu.load_cfg(menu.values[5].menu.configs["config name"].Text)
            end
        end)

        local function update_cfgs()
            all_cfgs = listfiles("ALWAYSFRAG\\")
            for _,cfg in next, all_cfgs do
                all_cfgs[_] = string.gsub(string.gsub(cfg, "ALWAYSFRAG\\", ""), ".txt", "")
                list:add_value(all_cfgs[_])
            end
        end update_cfgs()

        task.spawn(function()
            while true do
                wait(1)
                update_cfgs()
            end
        end)

        local methods = _menu.new_sector("settings", "Right")
        methods.element("Combo", "mouse types", {options = {"target", "hit"}})
        methods.element("Dropdown", "ray method", {options = {"none", "findpartonray", "findpartonraywithignorelist", "raycast"}})
        methods.element("Slider", "minimum ray ignore", {default = {min = 0, max = 100, default = 3}})
        methods.element("Combo", "must include", {options = {"camera", "character"}, default = {Combo = {"camera", "character"}}})
        --methods.element("Button", "destroy UI", nil, function()
            --print("1")
            --script.Parent.Parent:Destroy()
            --print("2")
        --end)

        local playercheck = _menu.new_sector("player check")
        playercheck.element("Toggle", "free for all")
        playercheck.element("Toggle", "forcefield check")
    end
    do
    local players = tabs[1].new_section("players")

    -- TAB NAME: PLAYERS | SECTOR NAME: ESP
    
    local esp = players.new_sector("esp")



local player = game:GetService("Players").LocalPlayer
local camera = game:GetService("Workspace").CurrentCamera

_G.espbox = false

_G.ESPBOX_Box_Color = Color3.fromRGB(255, 0, 0)
_G.ESPBOX_Box_Thickness = 2
_G.ESPBOX_Box_Transparency = 1
_G.ESPBOX_Tracers = false
_G.ESPBOX_Tracer_Color = Color3.fromRGB(255, 0, 0)
_G.ESPBOX_Tracer_Thickness = 2
_G.ESPBOX_Tracer_Transparency = 1
_G.ESPBOX_Autothickness = false
_G.ESPBOX_Team_Check = true
local red = Color3.fromRGB(227, 52, 52)
local green = Color3.fromRGB(88, 217, 24)

local function nl()
    local line = Drawing.new("Line")
    line.Visible = false
    line.From = Vector2.new(0, 0)
    line.To = Vector2.new(1, 1)
    line.Color = _G.ESPBOX_Box_Color
    line.Thickness = _G.ESPBOX_Box_Thickness
    line.Transparency = _G.ESPBOX_Box_Transparency
    return line
end

-- Table to store all ESP lines for each player
local playerESPLines = {}

local function createESP(v)
    local lines = {
        line1 = nl(),
        line2 = nl(),
        line3 = nl(),
        line4 = nl(),
        line5 = nl(),
        line6 = nl(),
        line7 = nl(),
        line8 = nl(),
        line9 = nl(),
        line10 = nl(),
        line11 = nl(),
        line12 = nl(),
        Tracer = nl()
    }

    -- Store the ESP lines in the global table
    playerESPLines[v.Name] = lines

    -- Set tracer properties initially
    lines.Tracer.Color = _G.ESPBOX_Tracer_Color
    lines.Tracer.Thickness = _G.ESPBOX_Tracer_Thickness
    lines.Tracer.Transparency = _G.ESPBOX_Tracer_Transparency

    local function BOXESPESP()
        local connection
        connection = game:GetService("RunService").RenderStepped:Connect(function()
            if _G.espbox and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character:FindFirstChild("HumanoidRootPart") and v.Name ~= player.Name and v.Character.Humanoid.Health > 0 and v.Character:FindFirstChild("Head") then
                local pos, vis = camera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
                if vis then
                    local Scale = v.Character.Head.Size.Y / 2
                    local Size = Vector3.new(2, 3, 1.5) * (Scale * 2)
                    local Top1 = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(-Size.X, Size.Y, -Size.Z)).p)
                    local Top2 = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(-Size.X, Size.Y, Size.Z)).p)
                    local Top3 = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(Size.X, Size.Y, Size.Z)).p)
                    local Top4 = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(Size.X, Size.Y, -Size.Z)).p)
                    local Bottom1 = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(-Size.X, -Size.Y, -Size.Z)).p)
                    local Bottom2 = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(-Size.X, -Size.Y, Size.Z)).p)
                    local Bottom3 = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(Size.X, -Size.Y, Size.Z)).p)
                    local Bottom4 = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(Size.X, -Size.Y, -Size.Z)).p)

                    lines.line1.From = Vector2.new(Top1.X, Top1.Y)
                    lines.line1.To = Vector2.new(Top2.X, Top2.Y)
                    lines.line2.From = Vector2.new(Top2.X, Top2.Y)
                    lines.line2.To = Vector2.new(Top3.X, Top3.Y)
                    lines.line3.From = Vector2.new(Top3.X, Top3.Y)
                    lines.line3.To = Vector2.new(Top4.X, Top4.Y)
                    lines.line4.From = Vector2.new(Top4.X, Top4.Y)
                    lines.line4.To = Vector2.new(Top1.X, Top1.Y)
                    lines.line5.From = Vector2.new(Bottom1.X, Bottom1.Y)
                    lines.line5.To = Vector2.new(Bottom2.X, Bottom2.Y)
                    lines.line6.From = Vector2.new(Bottom2.X, Bottom2.Y)
                    lines.line6.To = Vector2.new(Bottom3.X, Bottom3.Y)
                    lines.line7.From = Vector2.new(Bottom3.X, Bottom3.Y)
                    lines.line7.To = Vector2.new(Bottom4.X, Bottom4.Y)
                    lines.line8.From = Vector2.new(Bottom4.X, Bottom4.Y)
                    lines.line8.To = Vector2.new(Bottom1.X, Bottom1.Y)
                    lines.line9.From = Vector2.new(Bottom1.X, Bottom1.Y)
                    lines.line9.To = Vector2.new(Top1.X, Top1.Y)
                    lines.line10.From = Vector2.new(Bottom2.X, Bottom2.Y)
                    lines.line10.To = Vector2.new(Top2.X, Top2.Y)
                    lines.line11.From = Vector2.new(Bottom3.X, Bottom3.Y)
                    lines.line11.To = Vector2.new(Top3.X, Top3.Y)
                    lines.line12.From = Vector2.new(Bottom4.X, Bottom4.Y)
                    lines.line12.To = Vector2.new(Top4.X, Top4.Y)

                    if _G.ESPBOX_Tracers then
                        local trace = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(0, -Size.Y, 0)).p)
                        lines.Tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
                        lines.Tracer.To = Vector2.new(trace.X, trace.Y)
                    end

                    if _G.ESPBOX_Team_Check then
                        if v.TeamColor == player.TeamColor then
                            for _, x in pairs(lines) do
                                x.Color = green
                            end
                        else
                            for _, x in pairs(lines) do
                                x.Color = red
                            end
                        end
                    else
                        -- Update to the selected box color
                        for _, x in pairs(lines) do
                            x.Color = _G.ESPBOX_Box_Color
                        end
                    end

                    if _G.ESPBOX_Autothickness then
                        local distance = (player.Character.HumanoidRootPart.Position - v.Character.HumanoidRootPart.Position).magnitude
                        local value = math.clamp(1 / distance * 100, 0.1, 4) -- 0.1 is min thickness, 4 is max
                        for _, x in pairs(lines) do
                            x.Thickness = value
                        end
                    else
                        for _, x in pairs(lines) do
                            x.Thickness = _G.ESPBOX_Box_Thickness
                        end
                    end

                    for _, x in pairs(lines) do
                        if x ~= lines.Tracer then
                            x.Visible = true
                        end
                    end
                    if _G.ESPBOX_Tracers then
                        lines.Tracer.Visible = true
                    end
                else
                    for _, x in pairs(lines) do
                        x.Visible = false
                    end
                end
            else
                for _, x in pairs(lines) do
                    x.Visible = false
                end
                if game.Players:FindFirstChild(v.Name) == nil then
                    connection:Disconnect()
                end
            end
        end)
    end

    coroutine.wrap(BOXESPESP)()
end

for _, v in pairs(game.Players:GetChildren()) do
    createESP(v)
end

game.Players.PlayerAdded:Connect(function(newplr)
    createESP(newplr)
end)

-- UI Elements
esp.element("Toggle", "3D box esp", nil, function(Value)
    if type(Value) == "table" and Value.Toggle ~= nil then
        if Value.Toggle then
            _G.espbox = true
            print("ESP ON")
        else
            _G.espbox = false
            print("ESP OFF")
        end
    end
end):add_color({Color = _G.ESPBOX_Box_Color}, false, function(newColor)
    if type(newColor) == "table" and newColor.Color then
        local color = newColor.Color
        _G.ESPBOX_Box_Color = color
        local vespcolor = math.floor(color.R * 255) .. "," .. math.floor(color.G * 255) .. "," .. math.floor(color.B * 255)
        print("RGB Color: " .. vespcolor)

        -- Update the color for all existing players
        for _, lines in pairs(playerESPLines) do
            for _, line in pairs(lines) do
                line.Color = _G.ESPBOX_Box_Color
            end
        end
    else
        print("No Color3 object found in the table")
    end
end)








_G.Settings = {
    Color = Color3.fromRGB(255, 203, 138),
    Thickness = 1,
    Transparency = 1,
    AutoThickness = true,
    Length = 15,
    Smoothness = 0.2
}

_G.viewpointesptoggle = false

local player = game:GetService("Players").LocalPlayer
local camera = game:GetService("Workspace").CurrentCamera

local function viewpointesp(plr)
    local line = Drawing.new("Line")
    line.Visible = false
    line.From = Vector2.new(0, 0)
    line.To = Vector2.new(0, 0)
    line.Color = _G.Settings.Color -- Set initial color
    line.Thickness = _G.Settings.Thickness
    line.Transparency = _G.Settings.Transparency

    local function viewpointespupdater()
        local connection
        connection = game:GetService("RunService").RenderStepped:Connect(function()
            if _G.viewpointesptoggle and plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") ~= nil and plr.Character.Humanoid.Health > 0 and plr.Character:FindFirstChild("Head") ~= nil then
                local headpos, OnScreen = camera:WorldToViewportPoint(plr.Character.Head.Position)
                if OnScreen then
                    local offsetCFrame = CFrame.new(0, 0, -_G.Settings.Length)
                    local check = false
                    line.From = Vector2.new(headpos.X, headpos.Y)

                    -- Update the line color dynamically
                    line.Color = _G.Settings.Color

                    if _G.Settings.AutoThickness then
                        local distance = (player.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).magnitude
                        local value = math.clamp(1/distance * 100, 0.1, 3)
                        line.Thickness = value
                    end
                    repeat
                        local dir = plr.Character.Head.CFrame:ToWorldSpace(offsetCFrame)
                        offsetCFrame = offsetCFrame * CFrame.new(0, 0, _G.Settings.Smoothness)
                        local dirpos, vis = camera:WorldToViewportPoint(Vector3.new(dir.X, dir.Y, dir.Z))
                        if vis then
                            check = true
                            line.To = Vector2.new(dirpos.X, dirpos.Y)
                            line.Visible = true
                            offsetCFrame = CFrame.new(0, 0, -_G.Settings.Length)
                        end
                    until check == true
                else 
                    line.Visible = false
                end
            else 
                line.Visible = false
                if game.Players:FindFirstChild(plr.Name) == nil then
                    connection:Disconnect()
                end
            end
        end)
    end
    coroutine.wrap(viewpointespupdater)()
end

for i, v in pairs(game:GetService("Players"):GetPlayers()) do
    if v.Name ~= player.Name then
        coroutine.wrap(viewpointesp)(v)
    end
end

game.Players.PlayerAdded:Connect(function(newplr)
    if newplr.Name ~= player.Name then
        coroutine.wrap(viewpointesp)(newplr)
    end
end)




esp.element("Toggle", "Viewport esp", nil, function(Value)
    if type(Value) == "table" and Value.Toggle ~= nil then
        print("help me: " .. tostring(Value.Toggle))
        if Value.Toggle then
            _G.viewpointesptoggle = true
            print("ESP ON")
        else
            _G.viewpointesptoggle = false
            print("ESP OFF")
        end
    else
        print("?")
    end
end):add_color({Color = _G.Settings.Color}, false, function(newColor)
    if type(newColor) == "table" and newColor.Color then
        local color = newColor.Color
        _G.Settings.Color = color
        local vespcolor = math.floor(color.R * 255) .. "," .. math.floor(color.G * 255) .. "," .. math.floor(color.B * 255)
        print("RGB Color: " .. vespcolor)
    else
        print("No Color3 object found in the table")
    end
end)












        esp.element("Toggle", "Skeleton esp", nil, function(Value)
        print("help me: "..Value)
        end):add_color({Color = Color3.fromRGB(141, 115, 245)}, false)
        
        local oof = players.new_sector("out of fov", "Right")

        oof.element("Toggle", "Arrow esp"):add_keybind()
        oof.element("Toggle", "Radar"):add_keybind()

        local function UpdateChams()
            for _,Player in next, Players:GetPlayers() do
                if Player ~= LocalPlayer then
                    ApplyChams(Player)
                end
            end
        end

        local chams = players.new_sector("chams", "Right")
        chams.element("Toggle", "enemies", nil, UpdateChams):add_color({Color = Color3.fromRGB(141, 115, 245)}, false, UpdateChams)
        chams.element("Toggle", "friendlies", nil, UpdateChams):add_color({Color = Color3.fromRGB(102, 255, 102)}, false, UpdateChams)
        chams.element("Toggle", "through walls", nil, UpdateChams):add_color({Color = Color3.fromRGB(255, 0, 0)}, false, UpdateChams)


end
end
